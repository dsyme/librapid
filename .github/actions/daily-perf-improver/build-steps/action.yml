name: 'Daily Performance Improver - Build Steps'
description: 'Build and prepare LibRapid for performance testing and profiling'

runs:
  using: 'composite'
  steps:
    - name: Install System Dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          git \
          pkg-config \
          libopenblas-dev \
          liblapack-dev \
          libfftw3-dev \
          libmpfr-dev \
          libgmp-dev \
          libbenchmark-dev \
          valgrind \
          perf \
          linux-perf \
          kcachegrind \
          callgrind
    
    - name: Install Performance Profiling Tools
      shell: bash
      run: |
        # Install perf and profiling tools
        sudo apt-get install -y \
          linux-tools-common \
          linux-tools-generic \
          linux-cloud-tools-generic \
          flamegraph
        
        # Install additional performance analysis tools
        sudo apt-get install -y \
          gprof \
          gcov \
          lcov
    
    - name: Install Clang for Profiling
      shell: bash
      run: |
        sudo apt-get install -y \
          clang-16 \
          clang++-16 \
          llvm-16 \
          llvm-16-dev \
          llvm-16-tools
    
    - name: Set Performance Governor
      shell: bash
      run: |
        # Set CPU governor to performance for consistent benchmarking
        echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor || true
    
    - name: Build LibRapid (Debug with Profiling)
      shell: bash
      run: |
        mkdir -p buildDebugProfile
        cd buildDebugProfile
        cmake .. \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_STANDARD=20 \
          -DCMAKE_C_COMPILER=clang-16 \
          -DCMAKE_CXX_COMPILER=clang++-16 \
          -DCMAKE_CXX_FLAGS="-g -O0 -fprofile-instr-generate -fcoverage-mapping" \
          -DLIBRAPID_BUILD_EXAMPLES=ON \
          -DLIBRAPID_BUILD_TESTS=ON \
          -DLIBRAPID_USE_BLAS=ON \
          -DLIBRAPID_GET_BLAS=OFF \
          -DLIBRAPID_USE_MULTIPREC=ON \
          -DLIBRAPID_USE_OPENCL=OFF \
          -DLIBRAPID_USE_CUDA=OFF \
          -DLIBRAPID_FAST_MATH=OFF
        cmake --build . --config Debug -j$(nproc)
    
    - name: Build LibRapid (Release with Optimization)
      shell: bash
      run: |
        mkdir -p buildReleaseOptimized
        cd buildReleaseOptimized
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_STANDARD=20 \
          -DCMAKE_C_COMPILER=clang-16 \
          -DCMAKE_CXX_COMPILER=clang++-16 \
          -DCMAKE_CXX_FLAGS="-O3 -march=native -DNDEBUG" \
          -DLIBRAPID_BUILD_EXAMPLES=ON \
          -DLIBRAPID_BUILD_TESTS=ON \
          -DLIBRAPID_USE_BLAS=ON \
          -DLIBRAPID_GET_BLAS=OFF \
          -DLIBRAPID_USE_MULTIPREC=ON \
          -DLIBRAPID_USE_OPENCL=OFF \
          -DLIBRAPID_USE_CUDA=OFF \
          -DLIBRAPID_FAST_MATH=ON \
          -DLIBRAPID_NATIVE_ARCH=ON \
          -DLIBRAPID_OPTIMISE_SMALL_ARRAYS=ON
        cmake --build . --config Release -j$(nproc)
    
    - name: Run Basic Tests to Verify Builds
      shell: bash
      run: |
        cd buildReleaseOptimized
        ctest -C Release --output-on-failure --timeout 60
    
    - name: Install Google Benchmark (if not available)
      shell: bash
      run: |
        if ! pkg-config --exists benchmark; then
          git clone https://github.com/google/benchmark.git /tmp/benchmark
          cd /tmp/benchmark
          cmake -E make_directory "build"
          cmake -E chdir "build" cmake -DBENCHMARK_DOWNLOAD_DEPENDENCIES=on -DCMAKE_BUILD_TYPE=Release ../
          cmake --build build --config Release -j$(nproc)
          sudo cmake --build build --config Release --target install
        fi
    
    - name: Create Sample Performance Test Executable
      shell: bash
      run: |
        cat > /tmp/librapid_perf_test.cpp << 'EOF'
        #include <librapid/librapid.hpp>
        #include <benchmark/benchmark.h>
        #include <random>

        using namespace librapid;

        static void BM_ArrayAddition(benchmark::State& state) {
            auto size = state.range(0);
            Array<float> a = random<float>({size, size});
            Array<float> b = random<float>({size, size});
            
            for (auto _ : state) {
                auto result = a + b;
                benchmark::DoNotOptimize(result);
            }
            state.SetComplexityN(size * size);
        }

        static void BM_MatrixMultiply(benchmark::State& state) {
            auto size = state.range(0);
            Array<float> a = random<float>({size, size});
            Array<float> b = random<float>({size, size});
            
            for (auto _ : state) {
                auto result = dot(a, b);
                benchmark::DoNotOptimize(result);
            }
            state.SetComplexityN(size * size * size);
        }

        BENCHMARK(BM_ArrayAddition)->RangeMultiplier(2)->Range(8, 512)->Complexity();
        BENCHMARK(BM_MatrixMultiply)->RangeMultiplier(2)->Range(8, 256)->Complexity();

        BENCHMARK_MAIN();
        EOF
        
        cd buildReleaseOptimized
        clang++-16 -std=c++20 -O3 -march=native \
          -I../librapid/include \
          -L./librapid \
          /tmp/librapid_perf_test.cpp \
          -llibrapid \
          -lbenchmark \
          -lpthread \
          -lopenblas \
          -lmpfr -lgmp \
          -o librapid_perf_test
    
    - name: Print Environment Info
      shell: bash
      run: |
        echo "=== Performance Testing Environment ==="
        echo "CPU Info:"
        cat /proc/cpuinfo | grep "model name" | head -1
        echo "Memory Info:"
        free -h
        echo "Compiler Versions:"
        clang++-16 --version
        echo "BLAS Info:"
        pkg-config --modversion openblas || echo "OpenBLAS version not available"
        echo "Available Tools:"
        which perf && perf --version | head -1 || echo "perf not available"
        which valgrind && valgrind --version || echo "valgrind not available"
        echo "Build completed successfully!"